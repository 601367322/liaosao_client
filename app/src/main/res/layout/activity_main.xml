<!--
&lt;!&ndash; A DrawerLayout is intended to be used as the top-level content view using match_parent for both width and height to consume the full space available. &ndash;&gt;
<android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/drawer_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    &lt;!&ndash; As the main content view, the view below consumes the entire
         space available using match_parent in both dimensions. &ndash;&gt;
    <FrameLayout
        android:id="@+id/container"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    &lt;!&ndash; android:layout_gravity="start" tells DrawerLayout to treat
         this as a sliding drawer on the left side for left-to-right
         languages and on the right side for right-to-left languages.
         If you're not building against API 17 or higher, use
         android:layout_gravity="left" instead. &ndash;&gt;
    &lt;!&ndash; The drawer is given a fixed width in dp and extends the full height of
         the container. &ndash;&gt;
    <fragment
        android:id="@+id/navigation_drawer"
        android:name="com.xl.fragment.NavigationDrawerFragment_"
        android:layout_width="@dimen/navigation_drawer_width"
        android:layout_height="match_parent"
        android:layout_gravity="start" />

</android.support.v4.widget.DrawerLayout>
-->
<FrameLayout
    android:id="@+id/container"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    xmlns:android="http://schemas.android.com/apk/res/android" />